{:exit 0, :out "['perm', ['go', ['R', 'V']]]\n{'dinst': 'itemSearch', 'x': ['perm', ['go', ['R', 'V']]], 'sinst': 'killNSearch', 'df': [['perm', ['go', ['R', 'V']]]], 'cond': ['and', ['role', ['R', 'hero']], ['place', ['V', 'home']]], 'vars2': {'V': 'PlaceName', 'R': 'Agent'}, 'y': 'intStartItemSearch', 'sf': ['intStartItemSearch', []], 'xinitiates': [[['intStartItemSearch', []], [['perm', ['go', ['R', 'V']]]], ['and', ['role', ['R', 'hero']], ['place', ['V', 'home']]]], [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []]], 'vars1': {'V': 'PlaceName', 'R': 'Agent'}, 'rl': [['intStartItemSearch', []], [['perm', ['go', ['R', 'V']]]], ['and', ['role', ['R', 'hero']], ['place', ['V', 'home']]]], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7eff1763c080>}\n['phase', ['itemSearch', 'active']]\n{'k': 'R', 'dinst': 'itemSearch', 'x': ['phase', ['itemSearch', 'active']], 'sinst': 'killNSearch', 'df': [['phase', ['itemSearch', 'active']]], 'cond': [], 'vars2': {}, 'y': 'intStartItemSearch', 'sf': ['intStartItemSearch', []], 'xinitiates': [[['intStartItemSearch', []], [['perm', ['go', ['R', 'V']]]], ['and', ['role', ['R', 'hero']], ['place', ['V', 'home']]]], [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []]], 'vars1': {}, 'rl': [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7eff1763c080>}\n%\n% Rules for Bridge killNSearchItemSearch\n%\n  ifluent(live(killNSearchItemSearch), killNSearchItemSearch).\n  fluent(live(killNSearchItemSearch), killNSearchItemSearch).\n  bridge(killNSearchItemSearch).\n  sink(itemSearch, killNSearchItemSearch).\n  source(killNSearch, killNSearchItemSearch). \n  :- not _preludeLoaded. \n\nfluent(ipow(killNSearch,phase(Trope,Phase),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   phase(Phase),\n   trope(Trope),\n    fluent(phase(Trope,Phase), itemSearch).\nifluent(ipow(killNSearch,phase(Trope,Phase),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   phase(Phase),\n   trope(Trope),\n    fluent(phase(Trope,Phase), itemSearch).\nfluent(ipow(killNSearch,perm(go(Agent,PlaceName)),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   agent(Agent),\n   placename(PlaceName),\n    fluent(perm(go(Agent,PlaceName)), itemSearch).\nifluent(ipow(killNSearch,perm(go(Agent,PlaceName)),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   agent(Agent),\n   placename(PlaceName),\n    fluent(perm(go(Agent,PlaceName)), itemSearch).\n%\n% cross generate rules\n%\n%\n% cross initiation rules\n%\n%\n% Translation of intStartItemSearch of killNSearch xinitiates ['perm', ['go', ['R', 'V']]] of itemSearch if ['and', ['role', ['R', 'hero']], ['place', ['V', 'home']]]\n%\nxinitiated(killNSearch, perm(go(R,V)),itemSearch,I) :-\n   occurred(intStartItemSearch,killNSearch,I),\n   holdsat(ipow(killNSearch, perm(go(R,V)), itemSearch), killNSearchItemSearch, I), \n   holdsat(live(killNSearchItemSearch),killNSearchItemSearch,I), bridge(killNSearchItemSearch), \n   inst(itemSearch), inst(killNSearch), \n   holdsat(role(R,hero),None,I),\n   holdsat(place(V,home),None,I),\n   placename(V),\n   agent(R),\n   bridge(killNSearchItemSearch), instant(I).\n%\n% Translation of intStartItemSearch of killNSearch xinitiates ['phase', ['itemSearch', 'active']] of itemSearch if []\n%\nxinitiated(killNSearch, phase(itemSearch,active),itemSearch,I) :-\n   occurred(intStartItemSearch,killNSearch,I),\n   holdsat(ipow(killNSearch, phase(itemSearch,active), itemSearch), killNSearchItemSearch, I), \n   holdsat(live(killNSearchItemSearch),killNSearchItemSearch,I), bridge(killNSearchItemSearch), \n   inst(itemSearch), inst(killNSearch), \n   bridge(killNSearchItemSearch), instant(I).\n%\n% cross termination rules\n%\n%\n% initially\n%\n% no creation event\nholdsat(live(killNSearchItemSearch),killNSearchItemSearch,I) :- start(I), bridge(killNSearchItemSearch).\nholdsat(perm(null),killNSearchItemSearch,I) :- start(I), bridge(killNSearchItemSearch).\n% initially: ipow(killNSearch,perm(go(R,V)),itemSearch)\nholdsat(ipow(killNSearch,perm(go(R,V)),itemSearch),killNSearchItemSearch,I) :- not holdsat(live(killNSearchItemSearch),killNSearchItemSearch),\n   placename(V),\n   agent(R),\n   bridge(killNSearchItemSearch), source(killNSearch, killNSearchItemSearch), sink(itemSearch, killNSearchItemSearch), start(I).\n% initially: ipow(killNSearch,phase(itemSearch,active),itemSearch)\nholdsat(ipow(killNSearch,phase(itemSearch,active),itemSearch),killNSearchItemSearch,I) :- not holdsat(live(killNSearchItemSearch),killNSearchItemSearch),\n   bridge(killNSearchItemSearch), source(killNSearch, killNSearchItemSearch), sink(itemSearch, killNSearchItemSearch), start(I).\n\nThere are 13 answer sets\n", :err ""}