institution task2;
% TYPES ----------
type Identity;
type Agent;
type Role;
type Trope;
type Phase;
type Place;
type PlaceName;
type Object;
type ObjectName;

% FLUENTS ----------
fluent role(Agent, Role);
fluent phase(Trope, Phase);
fluent place(PlaceName, Place);
fluent object(ObjectName, Object);


% EXTERNAL EVENTS: Task 2 ----------
exogenous event go(Agent, PlaceName);
exogenous event noDeadline;

% VIOLATION EVENTS: Task 2 ----------
violation event noViolation;

% INST EVENTS: Task 2 ----------
inst event intGo(Agent, PlaceName);
inst event intTask2(Agent, PlaceName);
inst event intNoDeadline;



% INITIATES: Task 2 ----------
% TERMINATES: Task 2 ----------
intTask2(R, S) terminates
    phase(task2, active),
    perm(go(R, S)) if
        phase(task2, active),
        role(R, hero),
        place(S, home);


% GENERATES: Task 2 ----------
go(R, S) generates
    intTask2(R, S) if
        role(R, hero),
        place(S, home);

% INITIALLY: -----------
initially
    pow(intTask2(R, S)) if role(R, hero), place(S, home);
initially
    perm(intTask2(R, S)) if role(R, hero), place(S, home);
initially
    perm(go(R, S)) if role(R, hero), place(S, home);
initially
    phase(task2, active),
    role(hero, hero),
    role(villain, villain),
    role(mentor, mentor),
    place(home, home),
    place(evilLair, evilLair),
    place(landOfAdventure, landOfAdventure);
