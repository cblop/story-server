{:exit 0, :out "['perm', ['chase', ['R', 'S']]]\n{'sinst': 'killNSearch', 'x': ['perm', ['chase', ['R', 'S']]], 'vars2': {'S': 'ObjectName', 'R': 'Agent'}, 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f64c7a5dc50>, 'rl': [['intStartItemSearch', []], [['perm', ['chase', ['R', 'S']]]], ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]], 'y': 'intStartItemSearch', 'dinst': 'itemSearch', 'df': [['perm', ['chase', ['R', 'S']]]], 'xinitiates': [[['intStartItemSearch', []], [['perm', ['chase', ['R', 'S']]]], ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]], [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []]], 'vars1': {'S': 'ObjectName', 'R': 'Agent'}, 'cond': ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]], 'sf': ['intStartItemSearch', []]}\n['phase', ['itemSearch', 'active']]\n{'sinst': 'killNSearch', 'x': ['phase', ['itemSearch', 'active']], 'vars2': {}, 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f64c7a5dc50>, 'rl': [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []], 'y': 'intStartItemSearch', 'dinst': 'itemSearch', 'df': [['phase', ['itemSearch', 'active']]], 'xinitiates': [[['intStartItemSearch', []], [['perm', ['chase', ['R', 'S']]]], ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]], [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []]], 'vars1': {}, 'cond': [], 'sf': ['intStartItemSearch', []], 'k': 'R'}\n%\n% Rules for Bridge killNSearchItemSearch\n%\n  ifluent(live(killNSearchItemSearch), killNSearchItemSearch).\n  fluent(live(killNSearchItemSearch), killNSearchItemSearch).\n  bridge(killNSearchItemSearch).\n  sink(itemSearch, killNSearchItemSearch).\n  source(killNSearch, killNSearchItemSearch). \n  :- not _preludeLoaded. \n\nfluent(ipow(killNSearch,phase(Trope,Phase),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   trope(Trope),\n   phase(Phase),\n    fluent(phase(Trope,Phase), itemSearch).\nifluent(ipow(killNSearch,phase(Trope,Phase),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   trope(Trope),\n   phase(Phase),\n    fluent(phase(Trope,Phase), itemSearch).\nfluent(ipow(killNSearch,perm(chase(Agent,ObjectName)),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   agent(Agent),\n   objectname(ObjectName),\n    fluent(perm(chase(Agent,ObjectName)), itemSearch).\nifluent(ipow(killNSearch,perm(chase(Agent,ObjectName)),itemSearch), killNSearchItemSearch) :- \n    inst(killNSearch), source(killNSearch, killNSearchItemSearch), inst(itemSearch), sink(itemSearch, killNSearchItemSearch), bridge(killNSearchItemSearch), \n\n   agent(Agent),\n   objectname(ObjectName),\n    fluent(perm(chase(Agent,ObjectName)), itemSearch).\n%\n% cross generate rules\n%\n%\n% cross initiation rules\n%\n%\n% Translation of intStartItemSearch of killNSearch xinitiates ['perm', ['chase', ['R', 'S']]] of itemSearch if ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]\n%\nxinitiated(killNSearch, perm(chase(R,S)),itemSearch,I) :-\n   occurred(intStartItemSearch,killNSearch,I),\n   holdsat(ipow(killNSearch, perm(chase(R,S)), itemSearch), killNSearchItemSearch, I), \n   holdsat(live(killNSearchItemSearch),killNSearchItemSearch,I), bridge(killNSearchItemSearch), \n   inst(itemSearch), inst(killNSearch), \n   holdsat(role(R,hero),None,I),\n   holdsat(object(S,macguffin),None,I),\n   objectname(S),\n   agent(R),\n   bridge(killNSearchItemSearch), instant(I).\n%\n% Translation of intStartItemSearch of killNSearch xinitiates ['phase', ['itemSearch', 'active']] of itemSearch if []\n%\nxinitiated(killNSearch, phase(itemSearch,active),itemSearch,I) :-\n   occurred(intStartItemSearch,killNSearch,I),\n   holdsat(ipow(killNSearch, phase(itemSearch,active), itemSearch), killNSearchItemSearch, I), \n   holdsat(live(killNSearchItemSearch),killNSearchItemSearch,I), bridge(killNSearchItemSearch), \n   inst(itemSearch), inst(killNSearch), \n   bridge(killNSearchItemSearch), instant(I).\n%\n% cross termination rules\n%\n%\n% initially\n%\n% no creation event\nholdsat(live(killNSearchItemSearch),killNSearchItemSearch,I) :- start(I), bridge(killNSearchItemSearch).\nholdsat(perm(null),killNSearchItemSearch,I) :- start(I), bridge(killNSearchItemSearch).\n% initially: ipow(killNSearch,perm(chase(R,S)),itemSearch)\nholdsat(ipow(killNSearch,perm(chase(R,S)),itemSearch),killNSearchItemSearch,I) :- not holdsat(live(killNSearchItemSearch),killNSearchItemSearch),\n   objectname(S),\n   agent(R),\n   bridge(killNSearchItemSearch), source(killNSearch, killNSearchItemSearch), sink(itemSearch, killNSearchItemSearch), start(I).\n% initially: ipow(killNSearch,phase(itemSearch,active),itemSearch)\nholdsat(ipow(killNSearch,phase(itemSearch,active),itemSearch),killNSearchItemSearch,I) :- not holdsat(live(killNSearchItemSearch),killNSearchItemSearch),\n   bridge(killNSearchItemSearch), source(killNSearch, killNSearchItemSearch), sink(itemSearch, killNSearchItemSearch), start(I).\n\nThere are 6 answer sets\n", :err ""}