{:exit 0, :out "['perm', ['go_home', ['R']]]\n{'x': ['perm', ['go_home', ['R']]], 'vars2': {'R': 'Agent'}, 'cond': ['role', ['R', 'hero']], 'sf': ['intStartExample1', []], 'y': 'intStartExample1', 'xinitiates': [[['intStartExample1', []], [['perm', ['go_home', ['R']]]], ['role', ['R', 'hero']]], [['intStartExample1', []], [['phase', ['example1', 'active']]], []]], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f24fa3ee2b0>, 'sinst': 'newTrope', 'rl': [['intStartExample1', []], [['perm', ['go_home', ['R']]]], ['role', ['R', 'hero']]], 'dinst': 'example1', 'df': [['perm', ['go_home', ['R']]]], 'vars1': {'R': 'Agent'}}\n['phase', ['example1', 'active']]\n{'x': ['phase', ['example1', 'active']], 'vars2': {}, 'cond': [], 'k': 'R', 'sf': ['intStartExample1', []], 'y': 'intStartExample1', 'xinitiates': [[['intStartExample1', []], [['perm', ['go_home', ['R']]]], ['role', ['R', 'hero']]], [['intStartExample1', []], [['phase', ['example1', 'active']]], []]], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f24fa3ee2b0>, 'sinst': 'newTrope', 'rl': [['intStartExample1', []], [['phase', ['example1', 'active']]], []], 'dinst': 'example1', 'df': [['phase', ['example1', 'active']]], 'vars1': {}}\n%\n% Rules for Bridge newTropeExample1\n%\n  ifluent(live(newTropeExample1), newTropeExample1).\n  fluent(live(newTropeExample1), newTropeExample1).\n  bridge(newTropeExample1).\n  sink(example1, newTropeExample1).\n  source(newTrope, newTropeExample1). \n  :- not _preludeLoaded. \n\nfluent(ipow(newTrope,phase(Trope,Phase),example1), newTropeExample1) :- \n    inst(newTrope), source(newTrope, newTropeExample1), inst(example1), sink(example1, newTropeExample1), bridge(newTropeExample1), \n\n   trope(Trope),\n   phase(Phase),\n    fluent(phase(Trope,Phase), example1).\nifluent(ipow(newTrope,phase(Trope,Phase),example1), newTropeExample1) :- \n    inst(newTrope), source(newTrope, newTropeExample1), inst(example1), sink(example1, newTropeExample1), bridge(newTropeExample1), \n\n   trope(Trope),\n   phase(Phase),\n    fluent(phase(Trope,Phase), example1).\nfluent(ipow(newTrope,perm(go_home(Agent)),example1), newTropeExample1) :- \n    inst(newTrope), source(newTrope, newTropeExample1), inst(example1), sink(example1, newTropeExample1), bridge(newTropeExample1), \n\n   agent(Agent),\n    fluent(perm(go_home(Agent)), example1).\nifluent(ipow(newTrope,perm(go_home(Agent)),example1), newTropeExample1) :- \n    inst(newTrope), source(newTrope, newTropeExample1), inst(example1), sink(example1, newTropeExample1), bridge(newTropeExample1), \n\n   agent(Agent),\n    fluent(perm(go_home(Agent)), example1).\n%\n% cross generate rules\n%\n%\n% cross initiation rules\n%\n%\n% Translation of intStartExample1 of newTrope xinitiates ['perm', ['go_home', ['R']]] of example1 if ['role', ['R', 'hero']]\n%\nxinitiated(newTrope, perm(go_home(R)),example1,I) :-\n   occurred(intStartExample1,newTrope,I),\n   holdsat(ipow(newTrope, perm(go_home(R)), example1), newTropeExample1, I), \n   holdsat(live(newTropeExample1),newTropeExample1,I), bridge(newTropeExample1), \n   inst(example1), inst(newTrope), \n   holdsat(role(R,hero),newTrope,I),\n   agent(R),\n   bridge(newTropeExample1), instant(I).\n%\n% Translation of intStartExample1 of newTrope xinitiates ['phase', ['example1', 'active']] of example1 if []\n%\nxinitiated(newTrope, phase(example1,active),example1,I) :-\n   occurred(intStartExample1,newTrope,I),\n   holdsat(ipow(newTrope, phase(example1,active), example1), newTropeExample1, I), \n   holdsat(live(newTropeExample1),newTropeExample1,I), bridge(newTropeExample1), \n   inst(example1), inst(newTrope), \n   bridge(newTropeExample1), instant(I).\n%\n% cross termination rules\n%\n%\n% initially\n%\n% no creation event\nholdsat(live(newTropeExample1),newTropeExample1,I) :- start(I), bridge(newTropeExample1).\nholdsat(perm(null),newTropeExample1,I) :- start(I), bridge(newTropeExample1).\n% initially: ipow(newTrope,perm(go_home(R)),example1)\nholdsat(ipow(newTrope,perm(go_home(R)),example1),newTropeExample1,I) :- not holdsat(live(newTropeExample1),newTropeExample1),\n   agent(R),\n   bridge(newTropeExample1), source(newTrope, newTropeExample1), sink(example1, newTropeExample1), start(I).\n% initially: ipow(newTrope,phase(example1,active),example1)\nholdsat(ipow(newTrope,phase(example1,active),example1),newTropeExample1,I) :- not holdsat(live(newTropeExample1),newTropeExample1),\n   bridge(newTropeExample1), source(newTrope, newTropeExample1), sink(example1, newTropeExample1), start(I).\n\nThere are 9 answer sets\n", :err ""}