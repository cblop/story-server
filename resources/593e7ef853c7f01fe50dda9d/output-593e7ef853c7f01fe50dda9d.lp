{:exit 0, :out "['perm', ['go', ['R', 'V']]]\n{'sinst': 'useSubTrope', 'x': ['perm', ['go', ['R', 'V']]], 'cond': ['and', ['role', ['R', 'hero']], ['place', ['V', 'lair']]], 'dinst': 'task2', 'vars2': {'V': 'PlaceName', 'R': 'Agent'}, 'xinitiates': [[['intStartTask2', []], [['perm', ['go', ['R', 'V']]]], ['and', ['role', ['R', 'hero']], ['place', ['V', 'lair']]]], [['intStartTask2', []], [['phase', ['task2', 'active']]], []]], 'sf': ['intStartTask2', []], 'vars1': {'V': 'PlaceName', 'R': 'Agent'}, 'df': [['perm', ['go', ['R', 'V']]]], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f87b4b7db38>, 'y': 'intStartTask2', 'rl': [['intStartTask2', []], [['perm', ['go', ['R', 'V']]]], ['and', ['role', ['R', 'hero']], ['place', ['V', 'lair']]]]}\n['phase', ['task2', 'active']]\n{'sinst': 'useSubTrope', 'x': ['phase', ['task2', 'active']], 'cond': [], 'dinst': 'task2', 'k': 'R', 'vars2': {}, 'xinitiates': [[['intStartTask2', []], [['perm', ['go', ['R', 'V']]]], ['and', ['role', ['R', 'hero']], ['place', ['V', 'lair']]]], [['intStartTask2', []], [['phase', ['task2', 'active']]], []]], 'sf': ['intStartTask2', []], 'vars1': {}, 'df': [['phase', ['task2', 'active']]], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f87b4b7db38>, 'y': 'intStartTask2', 'rl': [['intStartTask2', []], [['phase', ['task2', 'active']]], []]}\n%\n% Rules for Bridge useSubTropeTask2\n%\n  ifluent(live(useSubTropeTask2), useSubTropeTask2).\n  fluent(live(useSubTropeTask2), useSubTropeTask2).\n  bridge(useSubTropeTask2).\n  sink(task2, useSubTropeTask2).\n  source(useSubTrope, useSubTropeTask2). \n  :- not _preludeLoaded. \n\nfluent(ipow(useSubTrope,phase(Trope,Phase),task2), useSubTropeTask2) :- \n    inst(useSubTrope), source(useSubTrope, useSubTropeTask2), inst(task2), sink(task2, useSubTropeTask2), bridge(useSubTropeTask2), \n\n   phase(Phase),\n   trope(Trope),\n    fluent(phase(Trope,Phase), task2).\nifluent(ipow(useSubTrope,phase(Trope,Phase),task2), useSubTropeTask2) :- \n    inst(useSubTrope), source(useSubTrope, useSubTropeTask2), inst(task2), sink(task2, useSubTropeTask2), bridge(useSubTropeTask2), \n\n   phase(Phase),\n   trope(Trope),\n    fluent(phase(Trope,Phase), task2).\nfluent(ipow(useSubTrope,perm(go(Agent,PlaceName)),task2), useSubTropeTask2) :- \n    inst(useSubTrope), source(useSubTrope, useSubTropeTask2), inst(task2), sink(task2, useSubTropeTask2), bridge(useSubTropeTask2), \n\n   placename(PlaceName),\n   agent(Agent),\n    fluent(perm(go(Agent,PlaceName)), task2).\nifluent(ipow(useSubTrope,perm(go(Agent,PlaceName)),task2), useSubTropeTask2) :- \n    inst(useSubTrope), source(useSubTrope, useSubTropeTask2), inst(task2), sink(task2, useSubTropeTask2), bridge(useSubTropeTask2), \n\n   placename(PlaceName),\n   agent(Agent),\n    fluent(perm(go(Agent,PlaceName)), task2).\n%\n% cross generate rules\n%\n%\n% cross initiation rules\n%\n%\n% Translation of intStartTask2 of useSubTrope xinitiates ['perm', ['go', ['R', 'V']]] of task2 if ['and', ['role', ['R', 'hero']], ['place', ['V', 'lair']]]\n%\nxinitiated(useSubTrope, perm(go(R,V)),task2,I) :-\n   occurred(intStartTask2,useSubTrope,I),\n   holdsat(ipow(useSubTrope, perm(go(R,V)), task2), useSubTropeTask2, I), \n   holdsat(live(useSubTropeTask2),useSubTropeTask2,I), bridge(useSubTropeTask2), \n   inst(task2), inst(useSubTrope), \n   holdsat(role(R,hero),None,I),\n   holdsat(place(V,lair),None,I),\n   placename(V),\n   agent(R),\n   bridge(useSubTropeTask2), instant(I).\n%\n% Translation of intStartTask2 of useSubTrope xinitiates ['phase', ['task2', 'active']] of task2 if []\n%\nxinitiated(useSubTrope, phase(task2,active),task2,I) :-\n   occurred(intStartTask2,useSubTrope,I),\n   holdsat(ipow(useSubTrope, phase(task2,active), task2), useSubTropeTask2, I), \n   holdsat(live(useSubTropeTask2),useSubTropeTask2,I), bridge(useSubTropeTask2), \n   inst(task2), inst(useSubTrope), \n   bridge(useSubTropeTask2), instant(I).\n%\n% cross termination rules\n%\n%\n% initially\n%\n% no creation event\nholdsat(live(useSubTropeTask2),useSubTropeTask2,I) :- start(I), bridge(useSubTropeTask2).\nholdsat(perm(null),useSubTropeTask2,I) :- start(I), bridge(useSubTropeTask2).\n% initially: ipow(useSubTrope,perm(go(R,V)),task2)\nholdsat(ipow(useSubTrope,perm(go(R,V)),task2),useSubTropeTask2,I) :- not holdsat(live(useSubTropeTask2),useSubTropeTask2),\n   placename(V),\n   agent(R),\n   bridge(useSubTropeTask2), source(useSubTrope, useSubTropeTask2), sink(task2, useSubTropeTask2), start(I).\n% initially: ipow(useSubTrope,phase(task2,active),task2)\nholdsat(ipow(useSubTrope,phase(task2,active),task2),useSubTropeTask2,I) :- not holdsat(live(useSubTropeTask2),useSubTropeTask2),\n   bridge(useSubTropeTask2), source(useSubTrope, useSubTropeTask2), sink(task2, useSubTropeTask2), start(I).\n\nThere are 6 answer sets\n", :err ""}